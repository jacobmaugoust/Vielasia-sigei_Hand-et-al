stopCluster(cl)
})
st1
st2
perm<-10000*3
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st1
st2
perm<-10000*4
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st1
st2
perm<-10000*5
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st1
st2
perm<-10000*6
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st1
st2
perm<-10000*7
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st1
st2
st3<-system.time({
metrics3<-matrix(apply(tests,1,function(x){
temp<-lapply(c(1,2),function(y){mult_ch[[y]][[tests[x,y]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(y){data.frame(PID=rep(y,nrow(temp[[y]])),POS=c(1:nrow(temp[[y]])),X=temp[[y]][,1],Y=temp[[y]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}),ncol=3,byrow=TRUE)
})
st3<-system.time({
metrics3<-matrix(apply(tests,1,function(x){
temp<-lapply(c(1,2),function(y){mult_ch[[y]][[x[y]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(y){data.frame(PID=rep(y,nrow(temp[[y]])),POS=c(1:nrow(temp[[y]])),X=temp[[y]][,1],Y=temp[[y]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}),ncol=3,byrow=TRUE)
})
st3
all(metrics==metrics3)
all(metrics2==metrics3)
perm<-10000*8
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st3<-system.time({
metrics3<-matrix(apply(tests,1,function(x){
temp<-lapply(c(1,2),function(y){mult_ch[[y]][[x[y]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(y){data.frame(PID=rep(y,nrow(temp[[y]])),POS=c(1:nrow(temp[[y]])),X=temp[[y]][,1],Y=temp[[y]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}),ncol=3,byrow=TRUE)
})
st1
st2
st3
perm<-10000*9
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st3<-system.time({
metrics3<-matrix(apply(tests,1,function(x){
temp<-lapply(c(1,2),function(y){mult_ch[[y]][[x[y]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(y){data.frame(PID=rep(y,nrow(temp[[y]])),POS=c(1:nrow(temp[[y]])),X=temp[[y]][,1],Y=temp[[y]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}),ncol=3,byrow=TRUE)
})
st1
st2
st3
perm<-10000*10
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
st1<-system.time({
metrics<-matrix(nrow=nrow(tests),ncol=3)
for(i in 1:nrow(tests)){
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
metrics[i,]<-c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
})
st2<-system.time({
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
metrics2<-foreach(i=1:nrow(tests),.combine="rbind",.packages=c("PBSmapping","splancs"))%dopar%{
temp<-lapply(c(1,2),function(x){mult_ch[[x]][[tests[i,x]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(x){data.frame(PID=rep(x,nrow(temp[[x]])),POS=c(1:nrow(temp[[x]])),X=temp[[x]][,1],Y=temp[[x]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}
stopCluster(cl)
})
st3<-system.time({
metrics3<-matrix(apply(tests,1,function(x){
temp<-lapply(c(1,2),function(y){mult_ch[[y]][[x[y]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(y){data.frame(PID=rep(y,nrow(temp[[y]])),POS=c(1:nrow(temp[[y]])),X=temp[[y]][,1],Y=temp[[y]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}),ncol=3,byrow=TRUE)
})
st1
st2
st3
# Faire les aires des chulls avant de faire les tests, comme ça on les rappelle juste, ça fait gagner déjà un peu de temps, ça ne demande de calculer que l'intersection et son aire
areas<-mapply(function(x){
sapply(c(1:length(x)),function(y){
areapl(as.matrix(x[[y]]))
})
},mult_ch)
areas
mult_ch
lapply(mult_ch,length)
lapply(areas,length)
int
areapl(NULL)
areapl(as.matrix(NULL))
areapl(as.matrix(c(NULL)))
areapl(0)
tests[1,]
st4<-system.time({
metrics4<-matrix(apply(tests,1,function(x){
temp<-lapply(c(1,2),function(y){mult_ch[[y]][[x[y]]]})
int<-do.call("joinPolys",lapply(c(1:2),function(y){data.frame(PID=rep(y,nrow(temp[[y]])),POS=c(1:nrow(temp[[y]])),X=temp[[y]][,1],Y=temp[[y]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[[1]][x[1]],area.int/areas[[2]][x[2]],area.int/c(areas[[1]][x[1]]+areas[[2]][x[2]]))
}),ncol=3,byrow=TRUE)
})
all(metrics3==metrics4)
st4
temp<-read.table("D:/TXT/Bureau/times.txt",header=TRUE,sep="\t")
temp<-read.table("D:/TXT/Bureau/times.txt",header=TRUE,sep="\t")
temp<-read.table("D:/TXT/Bureau/times.txt",header=TRUE,sep="\t")
temp<-read.table("D:/TXT/Bureau/times.txt",header=TRUE,sep="\t")
temp<-read.table("D:/TXT/Bureau/times.txt",header=TRUE,sep="\t")
plot(times[,2]~times[,1],ylim=c(0,max(times[,2:4])),type="b",col="red")
plot(temp[,2]~temp[,1],ylim=c(0,max(temp[,2:4])),type="b",col="red")
max(temp[,2:4])
plot(temp[,2]~temp[,1],ylim=c(0,max(na.omit(temp[,2:4]))),type="b",col="red")
dev.off()
plot(temp[,2]~temp[,1],ylim=c(0,max(na.omit(temp[,2:4]))),type="b",col="red")
points(temp[,3]~temp[,1],type="b",col="blue")
points(temp[,4]~temp[,1],type="b",col="green3")
plot(temp[2:10,2]/temp[1:9,2]~temp[2:10,1],ylim=c(0,max(na.omit(temp[2:10,2:4]/type[1:9,2:4]))),type="b",col="red")
plot(temp[2:10,2]/temp[1:9,2]~temp[2:10,1],ylim=c(0,max(na.omit(temp[2:10,2:4]/temp[1:9,2:4]))),type="b",col="red")
na.omit(temp[2:10,2:4]/temp[1:9,2:4])
temp[2:10,2:4]/temp[1:9,2:4]
plot(temp[2:10,2]/temp[1:9,2]~temp[2:10,1],ylim=c(0,2.5,type="b",col="red")
plot(temp[2:10,2]/temp[1:9,2]~temp[2:10,1],ylim=c(0,2.5,type="b",col="red")
)
plot(temp[2:10,2]/temp[1:9,2]~temp[2:10,1],ylim=c(0,2.5),type="b",col="red")
points(temp[2:10,3]/temp[1:9,3]~temp[2:10,1],type="b",col="blue")
points(temp[2:10,4]/temp[1:9,4]~temp[2:10,1],type="b",col="green3")
ni<-matrix(apply(tests,1,function(x){sapply(c(1,2),function(y){nrow(ch[[y]])-nrow(mult_ch[[y]][[unlist(x)[y]]])})}),ncol=2,byrow=TRUE)
ni<-cbind(ni,ni[,1]+ni[,2])
layout(matrix(c(1,1,2,2,3,3,4,5,5,5,5,4),ncol=6,byrow=TRUE))
for(i in 1:3){
boxplot(metrics[,i]~ni[,i])
}
plot.new()
morphospace(x,y,g,plot.new = TRUE,col=c("red","blue"),pch=21,bg=c("red","blue"))
n<-15
perm<-10000*10
xa<-runif(n,1,8)
ya<-runif(n,1,8)
xb<-runif(n,1,8)
yb<-runif(n,3,10)
x<-c(xa,xb)
y<-c(ya,yb)
g<-c(rep("a",n),rep("b",n))
ch<-morphospace(x,y,g,output = NA)
mult_ch<-list()
for(i in 1:length(ch)){
mult_ch[[i]]<-list()
for(j in 1:(nrow(ch[[i]])-3)){
to_rm<-expand.grid(as.data.frame(matrix(rep(c(1:nrow(ch[[i]])),j),ncol=j,byrow=FALSE)))
to_rm<-to_rm[apply(to_rm,1,function(x){length(unique(x))==j}),,drop=FALSE]
mult_ch[[i]]<-c(mult_ch[[i]],lapply(c(1:nrow(to_rm)),function(x){ch[[i]][-unlist(to_rm[x,]),]}))
}
}
tests<-expand.grid(lapply(mult_ch,function(x){c(1:length(x))}))
if(nrow(tests)>perm){
tests<-tests[sample(c(1:nrow(tests)),perm,replace=FALSE),]
}
metrics<-matrix(apply(tests,1,function(x){
temp<-lapply(c(1,2),function(y){mult_ch[[y]][[x[y]]]})
areas<-sapply(lapply(temp,as.matrix),areapl)
int<-do.call("joinPolys",lapply(c(1:2),function(y){data.frame(PID=rep(y,nrow(temp[[y]])),POS=c(1:nrow(temp[[y]])),X=temp[[y]][,1],Y=temp[[y]][,2])}))[,c("X","Y")]
if(is.null(int)){
area.int<-0
}
else{
area.int<-areapl(as.matrix(int))
}
c(area.int/areas[1],area.int/areas[2],area.int/sum(areas))
}),ncol=3,byrow=TRUE)
ni<-matrix(apply(tests,1,function(x){sapply(c(1,2),function(y){nrow(ch[[y]])-nrow(mult_ch[[y]][[unlist(x)[y]]])})}),ncol=2,byrow=TRUE)
ni<-cbind(ni,ni[,1]+ni[,2])
layout(matrix(c(1,1,2,2,3,3,4,5,5,5,5,4),ncol=6,byrow=TRUE))
for(i in 1:3){
boxplot(metrics[,i]~ni[,i])
}
plot.new()
morphospace(x,y,g,plot.new = TRUE,col=c("red","blue"),pch=21,bg=c("red","blue"))
?phylosignal
col_nasal<-"#F67BF6"
col_oral<-"#8B1EF0"
plot(1:2,1:2,pch=21,col=c(col_nasal,col_oral),bg=c(col_nasal,col_oral))
bony_lab_bats$Echolocation.call.type
setwd("D:\TXT\Work\Recherche\PUBLICATIONS\2023-1 - Hand et al. - Vielase bat\Vielasia-sigei_Hand-et-al\Statistical treatment")
setwd("D:/TXT/Work/Recherche/PUBLICATIONS/2023-1 - Hand et al. - Vielase bat/Vielasia-sigei_Hand-et-al/Statistical treatment")
invisible(lapply(c("ape","caper","doParallel","foreach","geiger","geomorph","lattice","LOST","MASS","mda","nnet","parallel","phylolm","phytools","scales","sensiPhy","sf","treeio","ULT"), library, character.only = TRUE))
load("Vielasia stat analyses.RData")
bony_lab_bats
read.table("7 bony_lab.txt",header=TRUE,sep="\t",dec=",")
factor(setNames(bony_lab$Echolocation.call.type,bony_lab$Species))
echo_groups
bony_lab$Echolocation.call.type
bony_lab
