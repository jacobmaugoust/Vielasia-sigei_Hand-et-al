optlambda <- matrix(,1,1);colnames(optlambda)<- "RSS"
optlambda[1,1]<-max(rslt[which(rslt[,2]==min(rslt[,2])),1])
if(plot){
matplot(rslt[,1],rslt[,2],type="l",xlab=expression(lambda),ylab="RSS",main="RSS",lty=1,col=1)
abline(v=optlambda[1,1],col=2,lty=2);mtext(paste("Optimal Lambda = ",optlambda[1,1],sep=""))
}
if(export){
pdf(height=11,width=6,file=paste(fldr,idc,".optLambda.pdf",sep=''));layout(matrix(c(1,2),2,1))
matplot(rslt[,1],rslt[,2],type="l",xlab=expression(lambda),ylab="RSS",main="RSS",lty=1,col=1)
abline(v=optlambda[1,1],col=2,lty=2);mtext(paste("Optimal Lambda = ",optlambda[1,1],sep=""))
dev.off()
}
list(optlambda=optlambda,rslt=rslt)
}
"optLambda.pred" <- function(measurementsA,grpsA,taxaA,mytreeA,testn,idc="default",sstep=0.01,srange=c(0,1),fldr="./",plot=TRUE,export=TRUE)
{
lambdalist <- seq(min(srange),max(srange),sstep)
segnum <- length(lambdalist)
rslt<-matrix(,segnum,2)
colnames(rslt) <- c("Lambda","RSS")
for(i in 1:segnum){
lambdaval <- lambdalist[i]
rss <- phylo.RSS.pred(measurementsA,grpsA,taxaA,mytreeA,testn,val=lambdaval)
rslt[i,] <- c(lambdaval,rss$RSS,rss$AICY) #replaced lLy with AICY
}
optlambda <- matrix(,1,1);colnames(optlambda)<- "RSS"
optlambda[1,1]<-max(rslt[which(rslt[,2]==min(rslt[,2])),1])
if(plot){
matplot(rslt[,1],rslt[,2],type="l",xlab=expression(lambda),ylab="RSS",main="RSS",lty=1,col=1)
abline(v=optlambda[1,1],col=2,lty=2);mtext(paste("Optimal Lambda = ",optlambda[1,1],sep=""))
}
if(export){
pdf(height=11,width=6,file=paste(fldr,idc,".optLambda.pred.pdf",sep=''));layout(matrix(c(1,2),2,1))
matplot(rslt[,1],rslt[,2],type="l",xlab=expression(lambda),ylab="RSS",main="RSS",lty=1,col=1)
abline(v=optlambda[1,1],col=2,lty=2);mtext(paste("Optimal Lambda = ",optlambda[1,1],sep=""))
dev.off()
}
list(optlambda=optlambda,rslt=rslt)
}
}
col_HF<-"darkgoldenrod"
col_LF<-contrasting.palette()[3]
col_LE<-"blue"
col_nasal<-"#8B1EF0"
col_oral<-"#F67BF6"
col_nonLE<-col_ptero<-"cyan"
col_nonbat<-"black"
col_VIE_fig3<-"#F37ECF"
col_VIE<-"firebrick1"
pch_nasal<-24
pch_oral<-25
pch_nonLE<-pch_yang<-22
pch_ptero<-25
pch_rhino<-24
pch_nonbat<-21
avg_pe_null
full_echo_cols_DA
full_echo_cols_DA<-c(col_HF,col_LF,col_LE,col_nonLE,col_nonbat)
echo_pch_da<-setNames(c(pch_nonbat,pch_nonbat,pch_nasal,pch_oral,pch_nonLE,pch_nonbat),c("HF-cet","LF-cet","Nasal","Oral","Non","non-bat"))
lda_groups_chu<-lda_groups_pch<-setNames(as.character(avg_DA_scores_null[,4]),rownames(avg_DA_scores_null))
lda_groups_chu[lda_groups_chu%in%c("Nasal","Oral")]<-"LE"
lda_groups_chu<-factor(lda_groups_chu,c("HF-cet","LF-cet","LE","Non","non-bat","unknown"))
lda_groups_pch<-factor(lda_groups_pch,c("HF-cet","LF-cet","Nasal","Oral","Non","non-bat","unknown"))
levels(lda_groups_pch)[levels(lda_groups_pch)%in%names(echo_pch_da)]<-echo_pch_da[match(levels(lda_groups_pch)[levels(lda_groups_pch)%in%names(echo_pch_da)],names(echo_pch_da))]
levels(lda_groups_pch)[levels(lda_groups_pch)=="unknown"]<-NA
lda_groups_pch<-as.numeric(as.character(lda_groups_pch))
pfda_groups_chu<-pfda_groups_pch<-setNames(as.character(avg_DA_scores_optL[,5]),rownames(avg_DA_scores_optL))
pfda_groups_chu[pfda_groups_chu%in%c("Nasal","Oral")]<-"LE"
pfda_groups_chu<-factor(pfda_groups_chu,c("HF-cet","LF-cet","LE","Non","non-bat","unknown"))
pfda_groups_pch<-factor(pfda_groups_pch,c("HF-cet","LF-cet","Nasal","Oral","Non","non-bat","unknown"))
levels(pfda_groups_pch)[levels(pfda_groups_pch)%in%names(echo_pch_da)]<-echo_pch_da[match(levels(pfda_groups_pch)[levels(pfda_groups_pch)%in%names(echo_pch_da)],names(echo_pch_da))]
levels(pfda_groups_pch)[levels(pfda_groups_pch)=="unknown"]<-NA
pfda_groups_pch<-as.numeric(as.character(pfda_groups_pch))
LDA_pFDA_morphospaces<-plots.variation(list_data=list(pfda_null$DA.scores,pfda_optL$DA.scores),
chull_data = if(exists("LDA_pFDA_morphospaces")){LDA_pFDA_morphospaces}else{NA},
avg_data=c(list(avg_DA_scores_null),list(avg_DA_scores_optL)),
data.name=c("DA","pFDA"),
axes=c(1,2),
axes.contrib=c(list(avg_pe_null),list(avg_pe_optL)),
morpho.groups=c(list(lda_groups_chu),list(pfda_groups_chu)),
morpho.cols=full_echo_cols_DA,
morpho.pch=c(list(lda_groups_pch),list(pfda_groups_pch)),
VIE.col = col_VIE_fig3,
return.chull.data=TRUE,out=TRUE,single.out=1,
out.names=c("Fig. 3D - Plot of mammal species including bats on first two axes of linear discriminant analysis (LDA) of PGLS regression residuals.eps",
"Fig. S3B - Individual variation in the discriminant analyses performed on the PGLS regression residuals.eps"))
save.image("D:/TXT/Work/Recherche/PUBLICATIONS/2023-1 - Hand et al. - Vielase bat/Vielasia-sigei_Hand-et-al/test/v3_WIP_5_after3D.RData")
# Crania landmarks and sliding semi-landmarks
lmk_crania<-read.table("8 lmk_crania.txt",header=T,dec=",",sep="\t")
crania_pairs<-rbind(cbind(c(seq(1,21,2)),c(seq(1,21,2))+1),matrix(ncol=2,nrow=length(c(38:53)),c(38:69),byrow=FALSE))
crania_slides<-list("1L"=c(27:37),"2L"=c(38:45),"2R"=c(54:61),"3L"=c(46:53),"3R"=c(62:69))
crania_gpa<-Arbour_et_al_treatment(lmk_crania[,3:dim(lmk_crania)[2]],lmk_crania$Shi.Tree.label,crania_pairs,crania_slides)
# Mandible landmarks and sliding semi-landmarks
lmk_mandible<-read.table("9 lmk_mandible.txt",header=T,dec=",",sep="\t")
mandible_pairs<-rbind(cbind(c(seq(2,12,2)),c(seq(2,12,2))+1),
matrix(ncol=2,nrow=length(c(14:21)),c(14:29),byrow=FALSE),
matrix(ncol=2,nrow=length(c(30:39)),c(c(30:39),c(50:41)),byrow=FALSE))
mandible_slides<-list("1L"=c(14:21),"1R"=c(22:29),"2L"=c(30:39),"2R"=c(50:41))
mandible_gpa<-Arbour_et_al_treatment(lmk_mandible[,3:dim(lmk_mandible)[2]],lmk_mandible$Shi.Tree.label,mandible_pairs,mandible_slides)
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
crania_ppca<-foreach(i=1:length(all_conc_SR),.packages = c("phytools","ape"))%dopar%{
crania_keep<-rownames(crania_gpa)[rownames(crania_gpa)%in%all_conc_SR[[i]]$tip.label]
phyl.pca(keep.tip(all_conc_SR[[i]],crania_keep),crania_gpa[crania_keep,],method="BM")$S
}
mandible_ppca<-foreach(i=1:length(all_conc_SR),.packages = c("phytools","ape"))%dopar%{
mandible_keep<-rownames(mandible_gpa)[rownames(mandible_gpa)%in%all_conc_SR[[i]]$tip.label]
phyl.pca(keep.tip(all_conc_SR[[i]],mandible_keep),mandible_gpa[mandible_keep,],method="BM")$S
}
stopCluster(cl)
# 'Realign' points, so that there are no axes inversions throughout the replications (i.e., phylogenies)
aligned_crania_ppca<-align_rep_ppca(crania_ppca)
aligned_mandible_ppca<-align_rep_ppca(mandible_ppca)
# Get the % of variance explained on each pPCA axis following Arbour et al. 2019 (i.e., % of variance of an axis = R2 explained by the given axis while regressing morphometric data against that axis)
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
crania_ppca_R2<-foreach(j=1:length(aligned_crania_ppca),.combine = "rbind",.packages="geomorph")%dopar%{
procD.lm(crania_gpa~aligned_crania_ppca[[j]][,1]+
aligned_crania_ppca[[j]][,2]+
aligned_crania_ppca[[j]][,3]+
aligned_crania_ppca[[j]][,4],
data=list(crania_gpa,aligned_crania_ppca[[j]][,1:4]))$aov.table[1:4,4]
}
mandible_ppca_R2<-foreach(j=1:length(aligned_mandible_ppca),.combine = "rbind",.packages="geomorph")%dopar%{
procD.lm(mandible_gpa~aligned_mandible_ppca[[j]][,1]+
aligned_mandible_ppca[[j]][,2]+
aligned_mandible_ppca[[j]][,3]+
aligned_mandible_ppca[[j]][,4],
data=list(mandible_gpa,aligned_mandible_ppca[[j]][,1:4]))$aov.table[1:4,4]
}
stopCluster(cl)
# Get the average value for each species on each pPCA axis. One can also ask for the median, the standard deviation, or the interquartile range by setting c("mean","sd","median","IQR").
avg_crania_ppca<-rep_ppca_operations(aligned_crania_ppca,"mean")$mean
avg_mandible_ppca<-rep_ppca_operations(aligned_mandible_ppca,"mean")$mean
# Get average % of variance explained
crania_ppca_R2<-round(100*apply(crania_ppca_R2,2,mean),1)
mandible_ppca_R2<-round(100*apply(mandible_ppca_R2,2,mean),1)
# Input ecological information (i.e., diet and echolocation call type) used by Arbour et al. 2019 and define colors
lmk_eco<-read.table("10 lmk_eco.txt",header=T,dec=",",sep="\t")
crania_species<-rownames(crania_gpa)
crania_eco<-lmk_eco[which(lmk_eco[,1]%in%crania_species),]
crania_eco<-crania_eco[match(rownames(avg_crania_ppca),crania_eco[,1]),]
mandible_species<-rownames(mandible_gpa)
mandible_eco<-lmk_eco[which(lmk_eco[,1]%in%mandible_species),]
mandible_eco<-mandible_eco[match(rownames(avg_mandible_ppca),mandible_eco[,1]),]
save.image("D:/TXT/Work/Recherche/PUBLICATIONS/2023-1 - Hand et al. - Vielase bat/Vielasia-sigei_Hand-et-al/test/v3_WIP_6_before4A.RData")
rm(full_echo_cols_DA)
save.image("D:/TXT/Work/Recherche/PUBLICATIONS/2023-1 - Hand et al. - Vielase bat/Vielasia-sigei_Hand-et-al/test/v3_WIP_6_before4A.RData")
pch_yang
pch_rhino
pch_ptero
setNames(crania_eco$Echolocation.Emission.Type,crania_eco$Species)
factor(setNames(crania_eco$Echolocation.Emission.Type,crania_eco$Species))
setNames(factor(crania_eco$Echolocation.Emission.Type),crania_eco$Species)
# For crania points
# NB: Graphics are displayed to resemble to those of Arbour et al. 2019.
#     Since on our crania pPCAs, pPC1 and pPC2 are inverted compared to the pPCA of Arbour et al. 2019, we plot opposite
#     values for both axes (i.e., -pPC1 and -pPC2)
gm_groups_chu<-factor(setNames(crania_eco$Echolocation.Emission.Type,crania_eco$Species),c("Oral","Nasal","Non","unknown"))
gm_groups_chu
echo_pch_gm<-setNames(c(pch_yang,pch_rhino,pch_ptero),c("Yang","Rhino","Ptero"))
gm_groups_pch<-crania_eco$Species
gm_groups_pch[gm_groups_pch%in%SR_phylo$tip.label[getDescendants(SR_phylo,819)[getDescendants(SR_phylo,819)<=Ntip(SR_phylo)]]]<-"Yang"
gm_groups_pch[gm_groups_pch%in%SR_phylo$tip.label[getDescendants(SR_phylo,1402)[getDescendants(SR_phylo,1402)<=Ntip(SR_phylo)]]]<-"Rhino"
gm_groups_pch[gm_groups_pch%in%SR_phylo$tip.label[getDescendants(SR_phylo,1522)[getDescendants(SR_phylo,1522)<=Ntip(SR_phylo)]]]<-"Ptero"
gm_groups_pch[!gm_groups_pch%in%c("Yang","Rhino","Ptero")]<-"unknown"
gm_groups_pch<-factor(gm_groups_pch,c("Yang","Rhino","Ptero","unknown"))
levels(gm_groups_pch)[levels(gm_groups_pch)%in%names(echo_pch_gm)]<-echo_pch_gm[match(levels(gm_groups_pch)[levels(gm_groups_pch)%in%names(echo_pch_gm)],names(echo_pch_gm))]
levels(gm_groups_pch)[levels(gm_groups_pch)=="unknown"]<-NA
gm_groups_pch<-as.numeric(as.character(gm_groups_pch))
crania_morphospaces<-plots.variation(list_data=aligned_crania_ppca,
chull_data = if(exists("crania_morphospaces")){crania_morphospaces}else{NA},
avg_data=avg_crania_ppca,
data.name="pPC",
axes=c(1,2,3),
axes.contrib=crania_ppca_R2,
axes.sign=c(-1,-1,1),
morpho.groups=gm_groups_chu,
morpho.cols=c(col_oral,col_nasal,col_nonLE),
morpho.pch=gm_groups_pch,
VIE.col = col_VIE,
return.chull.data=TRUE,out=TRUE,single.out=1,
out.names=c("Fig. 4A - Cranial shape in Vielasia sigei compared with extant bats.eps",
"Fig. S5A - Individual variation in pPCAs performed on cranium dataset.eps"))
gm_groups_pch
gm_groups_chu
cbind(gm_groups_chu,gm_groups_pch)
Vielasia_graph
plots.variation<-function(list_data=NA,chull_data=NA,avg_data,data.name="analysis",axes=c(1,2),axes.contrib=c(50,50),axes.sign=c(1,1),morpho.groups,morpho.cols=NA,morpho.pch=21,VIE.col="red",out=FALSE,out.names=NA,single.out=1,return.chull.data=FALSE){
get_chulls<-function(list_data,axes){
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
chull_full<-foreach(i=1:length(list_data[[1]][,1]),.packages="ULT")%dopar%{
x_data<-as.numeric(mapply(function(x){x[i,axes[1]]},list_data))
y_data<-as.numeric(mapply(function(x){x[i,axes[2]]},list_data))
morphospace(x_data,y_data,output=NA)[[1]]
}
chull_95<-foreach(i=1:length(list_data[[1]][,1]),.packages=c("ULT","sf"))%dopar%{
x_data<-as.numeric(mapply(function(x){x[i,axes[1]]},list_data))
y_data<-as.numeric(mapply(function(x){x[i,axes[2]]},list_data))
centroid<-st_centroid(st_polygon(list(as.matrix(rbind(chull_full[[i]],chull_full[[i]][1,])))))
x_center<-centroid[1]
y_center<-centroid[2]
each_square_dist<-sqrt((x_data-x_center)^2+(y_data-y_center)^2)
kept_ones<-which(each_square_dist<=quantile(each_square_dist,0.95))
x_data_95<-x_data[kept_ones]
y_data_95<-y_data[kept_ones]
morphospace(x_data_95,y_data_95,output=NA)[[1]]
}
stopCluster(cl)
chull_data<-list("full"=chull_full,"95"=chull_95)
return(chull_data)
}
plot_chulls<-function(chull_data,avg_data,data.name,axes,axes.contrib,axes.sign,morpho.groups,morpho.cols,morpho.pch,VIE.col,out,out.names,single.out){
xlab<-paste0(data.name," ",axes[1]," (",axes.contrib[1],"%)")
ylab<-paste0(data.name," ",axes[2]," (",axes.contrib[2],"%)")
chull_data<-lapply(chull_data,function(x){lapply(x,function(y){t(t(as.matrix(y))*axes.sign)})})
avg_data<-t(t(as.matrix(avg_data))*axes.sign)
par(mar=rep(3,4),mgp=c(2,0.5,0),pty="s")
# Plotting "full" and "95%" morphospaces for each individual
for(c in 1:2){
plot(x=0,y=0,type="n",xlab=xlab,ylab=ylab,xlim=range(unlist(mapply(function(x){x[,1]},chull_data[[c]]))),ylim=range(unlist(mapply(function(x){x[,2]},chull_data[[c]]))))
for (i in 1:length(chull_data[[c]])){
points(c(chull_data[[c]][[i]][,1],chull_data[[c]][[i]][1,1]),c(chull_data[[c]][[i]][,2],chull_data[[c]][[i]][1,2]),type="l",lwd=1,col=c(morpho.cols,VIE.col)[morpho.groups][i])
}
for (i in 1:(nlevels(morpho.groups)-1)){
morphospace(do.call("rbind",chull_data[[c]][morpho.groups==levels(morpho.groups)[i]]),col=c(morpho.cols)[i],lwd=2,plot.points = FALSE)
}
morphospace(do.call("rbind",chull_data[[c]][which(names(morpho.groups)=="Vielasia_sigei")]),col=c(VIE.col),lwd=2,plot.points = FALSE)
}
# Plotting average position of the species
Vg.args<-list(x=as.numeric(avg_data[,1]),
y=as.numeric(avg_data[,2]),
Vielasia=which(names(morpho.groups)=="Vielasia_sigei"),
groups = morpho.groups,
cols=c(morpho.cols),
opt=1,
xlab=xlab,
ylab=ylab,
pch=morpho.pch,
legend=FALSE,
Vielasia_col = VIE.col)
browser()
if(single.out){
postscript(out.names[1])
do.call("Vielasia_graph",Vg.args)
dev.off()
}
do.call("Vielasia_graph",Vg.args)
if(out){
dev.off()
}
}
type<-ifelse(length(data.name)>1|length(axes)>2,2,1)
if(type==1){
if(any(is.na(chull_data))){
chull_data<-get_chulls(list_data,axes)
}
single.out<-ifelse(out,TRUE,FALSE)
if(out&&length(out.names)==2){
postscript(out.names[2])
}
par(mfrow=c(1,3))
plot_chulls(chull_data,avg_data,data.name,axes,axes.contrib,morpho.groups,morpho.cols,morpho.pch,VIE.col,out,out.names,single.out)
}
if(type==2){
if(length(axes)>2){
if(length(axes)==3){
if(any(is.na(chull_data))){
chull_data_12<-get_chulls(list_data,axes[c(1,2)])
chull_data_13<-get_chulls(list_data,axes[c(1,3)])
chull_data<-setNames(list(chull_data_12,chull_data_13),c("axes 1 and 2","axes 1 and 3"))
}
avg_data<-c(list(avg_data[,axes[c(1,2)]]),list(avg_data[,axes[c(1,3)]]))
axes<-c(list(axes[c(1,2)]),list(axes[c(1,3)]))
axes.contrib<-c(list(axes.contrib[c(1,2)]),list(axes.contrib[c(1,3)]))
if(length(axes.sign)==2){
axes.sign<-rep(list(axes.sign),2)
}
else{
axes.sign<-c(list(axes.sign[c(1,2)]),list(axes.sign[c(1,3)]))
}
}
if(length(axes)==4){
if(any(is.na(chull_data))){
chull_data_12<-get_chulls(list_data,axes[c(1,2)])
chull_data_34<-get_chulls(list_data,axes[c(3,4)])
chull_data<-setNames(list(chull_data_12,chull_data_34),c("axes 1 and 2","axes 3 and 4"))
}
avg_data<-c(list(avg_data[,axes[c(1,2)]]),list(avg_data[,axes[c(3,4)]]))
axes<-c(list(axes[c(1,2)]),list(axes[c(3,4)]))
axes.contrib<-c(list(axes.contrib[c(1,2)]),list(axes.contrib[c(3,4)]))
if(length(axes.sign)==2){
axes.sign<-rep(list(axes.sign),2)
}
else{
axes.sign<-c(list(axes.sign[c(1,2)]),list(axes.sign[c(3,4)]))
}
}
data.name<-rep(data.name,2)
morpho.groups<-c(rep(list(morpho.groups),2))
}
else if(length(data.name)>1){
if(any(is.na(chull_data))){
chull_data_1<-get_chulls(list_data[[1]],axes)
chull_data_2<-get_chulls(list_data[[2]],axes)
chull_data<-setNames(list(chull_data_1,chull_data_2),data.name)
}
else{
names(chull_data)<-data.name
}
avg_data<-lapply(avg_data,function(x){x[,1:2]})
axes<-c(list(axes),list(axes))
axes.contrib<-lapply(axes.contrib,function(x){x[1:2]})
if(length(axes.sign)==2){
axes.sign<-rep(list(axes.sign),2)
}
else{
axes.sign<-c(list(axes.sign[c(1,2)]),list(axes.sign[c(3,4)]))
}
}
if(out&&length(out.names)==2){
postscript(out.names[2])
}
par(mfrow=c(2,3))
for(d in 1:2){
plot_chulls(chull_data[[d]],avg_data[[d]],data.name[d],axes[[d]],axes.contrib[[d]],axes.sign[[d]],morpho.groups[[d]],morpho.cols,morpho.pch[[d]],VIE.col,out=ifelse(d==2,TRUE,FALSE),out.names,single.out=ifelse(d==single.out,TRUE,FALSE))
}
}
if(return.chull.data){
return(chull_data)
}
}
exists("crania_morphospaces")
crania_morphospaces<-plots.variation(list_data=aligned_crania_ppca,
chull_data = if(exists("crania_morphospaces")){crania_morphospaces}else{NA},
avg_data=avg_crania_ppca,
data.name="pPC",
axes=c(1,2,3),
axes.contrib=crania_ppca_R2,
axes.sign=c(-1,-1,1),
morpho.groups=gm_groups_chu,
morpho.cols=c(col_oral,col_nasal,col_nonLE),
morpho.pch=gm_groups_pch,
VIE.col = col_VIE,
return.chull.data=TRUE,out=TRUE,single.out=1,
out.names=c("Fig. 4A - Cranial shape in Vielasia sigei compared with extant bats.eps",
"Fig. S5A - Individual variation in pPCAs performed on cranium dataset.eps"))
recover()
morpho.pch[[d]]
dev.off()
plots.variation<-function(list_data=NA,chull_data=NA,avg_data,data.name="analysis",axes=c(1,2),axes.contrib=c(50,50),axes.sign=c(1,1),morpho.groups,morpho.cols=NA,morpho.pch=21,VIE.col="red",out=FALSE,out.names=NA,single.out=1,return.chull.data=FALSE){
get_chulls<-function(list_data,axes){
cl<-makeCluster(detectCores()-1)
registerDoParallel(cl)
chull_full<-foreach(i=1:length(list_data[[1]][,1]),.packages="ULT")%dopar%{
x_data<-as.numeric(mapply(function(x){x[i,axes[1]]},list_data))
y_data<-as.numeric(mapply(function(x){x[i,axes[2]]},list_data))
morphospace(x_data,y_data,output=NA)[[1]]
}
chull_95<-foreach(i=1:length(list_data[[1]][,1]),.packages=c("ULT","sf"))%dopar%{
x_data<-as.numeric(mapply(function(x){x[i,axes[1]]},list_data))
y_data<-as.numeric(mapply(function(x){x[i,axes[2]]},list_data))
centroid<-st_centroid(st_polygon(list(as.matrix(rbind(chull_full[[i]],chull_full[[i]][1,])))))
x_center<-centroid[1]
y_center<-centroid[2]
each_square_dist<-sqrt((x_data-x_center)^2+(y_data-y_center)^2)
kept_ones<-which(each_square_dist<=quantile(each_square_dist,0.95))
x_data_95<-x_data[kept_ones]
y_data_95<-y_data[kept_ones]
morphospace(x_data_95,y_data_95,output=NA)[[1]]
}
stopCluster(cl)
chull_data<-list("full"=chull_full,"95"=chull_95)
return(chull_data)
}
plot_chulls<-function(chull_data,avg_data,data.name,axes,axes.contrib,axes.sign,morpho.groups,morpho.cols,morpho.pch,VIE.col,out,out.names,single.out){
xlab<-paste0(data.name," ",axes[1]," (",axes.contrib[1],"%)")
ylab<-paste0(data.name," ",axes[2]," (",axes.contrib[2],"%)")
chull_data<-lapply(chull_data,function(x){lapply(x,function(y){t(t(as.matrix(y))*axes.sign)})})
avg_data<-t(t(as.matrix(avg_data))*axes.sign)
par(mar=rep(3,4),mgp=c(2,0.5,0),pty="s")
# Plotting "full" and "95%" morphospaces for each individual
for(c in 1:2){
plot(x=0,y=0,type="n",xlab=xlab,ylab=ylab,xlim=range(unlist(mapply(function(x){x[,1]},chull_data[[c]]))),ylim=range(unlist(mapply(function(x){x[,2]},chull_data[[c]]))))
for (i in 1:length(chull_data[[c]])){
points(c(chull_data[[c]][[i]][,1],chull_data[[c]][[i]][1,1]),c(chull_data[[c]][[i]][,2],chull_data[[c]][[i]][1,2]),type="l",lwd=1,col=c(morpho.cols,VIE.col)[morpho.groups][i])
}
for (i in 1:(nlevels(morpho.groups)-1)){
morphospace(do.call("rbind",chull_data[[c]][morpho.groups==levels(morpho.groups)[i]]),col=c(morpho.cols)[i],lwd=2,plot.points = FALSE)
}
morphospace(do.call("rbind",chull_data[[c]][which(names(morpho.groups)=="Vielasia_sigei")]),col=c(VIE.col),lwd=2,plot.points = FALSE)
}
# Plotting average position of the species
Vg.args<-list(x=as.numeric(avg_data[,1]),
y=as.numeric(avg_data[,2]),
Vielasia=which(names(morpho.groups)=="Vielasia_sigei"),
groups = morpho.groups,
cols=c(morpho.cols),
opt=1,
xlab=xlab,
ylab=ylab,
pch=morpho.pch,
legend=FALSE,
Vielasia_col = VIE.col)
if(single.out){
postscript(out.names[1])
do.call("Vielasia_graph",Vg.args)
dev.off()
}
do.call("Vielasia_graph",Vg.args)
if(out){
dev.off()
}
}
type<-ifelse(length(data.name)>1|length(axes)>2,2,1)
if(type==1){
if(any(is.na(chull_data))){
chull_data<-get_chulls(list_data,axes)
}
single.out<-ifelse(out,TRUE,FALSE)
if(out&&length(out.names)==2){
postscript(out.names[2])
}
par(mfrow=c(1,3))
plot_chulls(chull_data,avg_data,data.name,axes,axes.contrib,morpho.groups,morpho.cols,morpho.pch,VIE.col,out,out.names,single.out)
}
if(type==2){
if(length(axes)>2){
if(length(axes)==3){
if(any(is.na(chull_data))){
chull_data_12<-get_chulls(list_data,axes[c(1,2)])
chull_data_13<-get_chulls(list_data,axes[c(1,3)])
chull_data<-setNames(list(chull_data_12,chull_data_13),c("axes 1 and 2","axes 1 and 3"))
}
avg_data<-c(list(avg_data[,axes[c(1,2)]]),list(avg_data[,axes[c(1,3)]]))
axes<-c(list(axes[c(1,2)]),list(axes[c(1,3)]))
axes.contrib<-c(list(axes.contrib[c(1,2)]),list(axes.contrib[c(1,3)]))
if(length(axes.sign)==2){
axes.sign<-rep(list(axes.sign),2)
}
else{
axes.sign<-c(list(axes.sign[c(1,2)]),list(axes.sign[c(1,3)]))
}
}
if(length(axes)==4){
if(any(is.na(chull_data))){
chull_data_12<-get_chulls(list_data,axes[c(1,2)])
chull_data_34<-get_chulls(list_data,axes[c(3,4)])
chull_data<-setNames(list(chull_data_12,chull_data_34),c("axes 1 and 2","axes 3 and 4"))
}
avg_data<-c(list(avg_data[,axes[c(1,2)]]),list(avg_data[,axes[c(3,4)]]))
axes<-c(list(axes[c(1,2)]),list(axes[c(3,4)]))
axes.contrib<-c(list(axes.contrib[c(1,2)]),list(axes.contrib[c(3,4)]))
if(length(axes.sign)==2){
axes.sign<-rep(list(axes.sign),2)
}
else{
axes.sign<-c(list(axes.sign[c(1,2)]),list(axes.sign[c(3,4)]))
}
}
data.name<-rep(data.name,2)
morpho.groups<-c(rep(list(morpho.groups),2))
morpho.pch<-c(rep(list(morpho.pch),2))
}
else if(length(data.name)>1){
if(any(is.na(chull_data))){
chull_data_1<-get_chulls(list_data[[1]],axes)
chull_data_2<-get_chulls(list_data[[2]],axes)
chull_data<-setNames(list(chull_data_1,chull_data_2),data.name)
}
else{
names(chull_data)<-data.name
}
avg_data<-lapply(avg_data,function(x){x[,1:2]})
axes<-c(list(axes),list(axes))
axes.contrib<-lapply(axes.contrib,function(x){x[1:2]})
if(length(axes.sign)==2){
axes.sign<-rep(list(axes.sign),2)
}
else{
axes.sign<-c(list(axes.sign[c(1,2)]),list(axes.sign[c(3,4)]))
}
}
if(out&&length(out.names)==2){
postscript(out.names[2])
}
par(mfrow=c(2,3))
for(d in 1:2){
plot_chulls(chull_data[[d]],avg_data[[d]],data.name[d],axes[[d]],axes.contrib[[d]],axes.sign[[d]],morpho.groups[[d]],morpho.cols,morpho.pch[[d]],VIE.col,out=ifelse(d==2,TRUE,FALSE),out.names,single.out=ifelse(d==single.out,TRUE,FALSE))
}
}
if(return.chull.data){
return(chull_data)
}
}
crania_morphospaces<-plots.variation(list_data=aligned_crania_ppca,
chull_data = if(exists("crania_morphospaces")){crania_morphospaces}else{NA},
avg_data=avg_crania_ppca,
data.name="pPC",
axes=c(1,2,3),
axes.contrib=crania_ppca_R2,
axes.sign=c(-1,-1,1),
morpho.groups=gm_groups_chu,
morpho.cols=c(col_oral,col_nasal,col_nonLE),
morpho.pch=gm_groups_pch,
VIE.col = col_VIE,
return.chull.data=TRUE,out=TRUE,single.out=1,
out.names=c("Fig. 4A - Cranial shape in Vielasia sigei compared with extant bats.eps",
"Fig. S5A - Individual variation in pPCAs performed on cranium dataset.eps"))
head(names(sort(c((avg_mandible_ppca[which(rownames(avg_mandible_ppca)!="Vielasia_sigei"),1]-avg_mandible_ppca[which(rownames(avg_mandible_ppca)=="Vielasia_sigei"),1])^2+(avg_mandible_ppca[which(rownames(avg_mandible_ppca)!="Vielasia_sigei"),2]-avg_mandible_ppca[which(rownames(avg_mandible_ppca)=="Vielasia_sigei"),2])^2),decreasing = FALSE)))
head(names(sort(c((avg_mandible_ppca[which(rownames(avg_mandible_ppca)!="Vielasia_sigei"),3]-avg_mandible_ppca[which(rownames(avg_mandible_ppca)=="Vielasia_sigei"),3])^2+(avg_mandible_ppca[which(rownames(avg_mandible_ppca)!="Vielasia_sigei"),4]-avg_mandible_ppca[which(rownames(avg_mandible_ppca)=="Vielasia_sigei"),4])^2),decreasing = FALSE)))
